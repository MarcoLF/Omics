---
title: "get.coord() 181120_ML"
output:
  pdf_document: default
  html_document:
    df_print: paged
  html_notebook: default
---
*The following script returns genomic coordinates around preset TSSs using a range that is decided by the user.* 

Here, I develop such script starting from RNA-seq data that were previously analysed (*FGC - ETH Zurich*). More specifically, from previously defined TSSs, I wanted to defined the coordinates around each TSS with a given dimension (*n* bases upstream and *m* downstram from each TSS) taking in consideration the gene orientation (+ or - strand) to which the TSS is associated.

To start, I specify the path where to look for the data that contains our starting information (RNA-seq analysis derived)
```{r}
input = "" #folder containg my data
name = c('L4440_grh1', 'N2_del', 'N2b1_2', 'N2b2_11') #names of the RNA-seq data table
FDR = c('1','1','1','1') #FDR values for each samples -SAME OREDER!!-
#returns an example of how the dataframe looks like
head(read.table(paste0(name[1], '.txt'), sep = "\t", header = T)) 
```

The function **get.coord()** uses the information from the RNA-seq dataframes and returns for each of them a new .bed file that can be processed with the function *getfasta* (*bedtools2*) to obtain the specific sequences.

**Specifics:**
in **getcoord()** you need to specify:

**x** = vector containg the files' names that will be processed  
**up.s** = number of bp upstram the TSS  
**down.s** = number of bp downstream the TSS  
**DE** = character that can be 'up' or 'down' for upreagulated or downregulated respectively  
**FDR** = a number (or a vector containing numbers) specifying the FDR that need to be use for each file. **IMPORTANT** - *the file order in x and the FDR numbers has to match the corrisponding data - sharing the same position in the vector.*

In addition, **get.coord()** gives back two series of plot representing the distribution of the distance of the first codon from the TSS sperated in upregulated and downregulated genes for each sample. Obviously, this analysis is possible only for those genes that have such information in the data frame. All the genes that miss such information are removed from the density distribution. However, the percentage of genes used for the analysis is given in the final graphs.

#function to calculate new coordinates
get.coord = function(x, up.s, down.s, DE, FDR){ #specify the function.
  
  #set the condition for the graphs print as .pdf
  pdf(file=paste0(input, DE, " density from the first codon.pdf", sep=""), 
      width=11.69, height=8.27);
  
  par(mfcol=c(2,2));
  par(mai=c(1,1,1,1));
  
  #this loop runs for each i element of the x vector
  for (i in 1:length(x)){
  
    #import specifc data  
  d = read.table(paste0(input, x[i], '.txt'), header = T, sep = "\t") 
  #converts (makes sure) the column chromosome as "character"
  d$chr= as.character(d$chr) 
  #removes the data from the mtDNA
  d = d[which(d$chr != "MtDNA"),] 
  
  if (DE %in% 'up'){
    #selects only up regulated genes according to the FDR value
    d = d[which(d$log2.Ratio > 0 & d$fdr.RNAseq < FDR[i]),] 
  }
  else {
    #selects only dowen regualted genes according to the FDR value
    d = d[which(d$log2.Ratio < 0 & d$fdr.RNAseq < FDR[i]),] 
  }
  
  #creates a new df based on those genes that have the first codon position
  new.RNA.data = d[complete.cases(d$start.position),] 
  
  #defines the TSS from the RNA-seq data and from previously published data (check table)
  tss = c(ifelse(d$start.position %in% NA,
                 ifelse(d$strand %in% '-', d$end.RNAseq, d$start.RNAseq), 
                 d$start.position)) 
  
  #creates a new df with the relevant information for the next steps
  n.d = data.frame(id = d$Wormbase.ID, chr = d$chr, TSS = tss,  strand =d$strand) 
  #determine the upstream position
  n.d$start.adj = ifelse(n.d$strand %in% "-", n.d$TSS - down.s, n.d$TSS - up.s)
  #determine the downstream position
  n.d$end.adj = ifelse(n.d$strand %in% "-", n.d$TSS + up.s, n.d$TSS + down.s)
  #sets to 0 those genes that result with negative strating point
  n.d$start.adj = ifelse(n.d$start.adj < 0, 0, n.d$start.adj)
  #adds the gene wormbase ID to each coordinate set
  n.d$name = d$Wormbase.ID
  
  #generates the final relevant data frame
  coord = data.frame( chr = paste0("chr",n.d$chr), n.d$start.adj, n.d$end.adj, n.d$name)
  #remove scintific annotation
  options("scipen"=100, "digits"=4)
  
  #writes the data frame in the same folder from which it was previously loaded
  write.table(coord, paste0(input, x[i], '_', DE, 
                            '_regulated_coord around TSS -', up.s, ' +', down.s, '.bed'),
              sep= "\t", col.names =F, row.names = F,  quote = F)
  
  #calculates and plots the density distribution of the distances 
  #from the first codon to the TSS
  plot((dens<-density(log10(new.RNA.data$distance.to.the.start.codon))),
       main = paste0('analysis of ', x[i], " ",DE, " regulated \n",
                     round(length(new.RNA.data[,1])/length(d[,1])*100, digits = 2), 
                     '% out of ', length(d[,1]), " total genes"),
       xlab=paste0("log distance to the first codon \n"), 
       ylab="Density", lwd=2);
  abline(v = mean(log10(new.RNA.data$distance.to.the.start.codon)), col = "red");
  abline(v = log10(1000), col = "blue");
  
  }
  rm(i);
  dev.off();
}


#upload file containg position values
grh = read.table("Desktop/Promoter analysis/GRH-1.pfm.txt", sep = '\t', header = T)

#vector with all values per base per postion
v = c(grh$A, grh$C, grh$G, grh$T)

#create PFM for TFBStools
pfm <- PFMatrix(name="Grh-1", strand="+",
                bg=c(A=0.25, C=0.25, G=0.25, T=0.25),
                tags=list(species="C.elegans",
                          tax_group="nematodes"),
                profileMatrix=matrix(v,
                                     byrow=TRUE, nrow=4,
                                     dimnames=list(c("A", "C", "G", "T"))
                )
)

#create PWM from PFM
pwm = toPWM(pfm, pseudocounts = 0.8)


#specify directory
dir = "Desktop/Promoter analysis/"

#name of the genes
name = c('L4440_grh1', 'N2_del', 'N2b1_2', 'N2b2_11')

# name = c('L4440_grh1') ++use it as example on one data set only


#function that uses TFBSTools
TFBs.analysis = function(dir,data,pwm,score){
  
  library(TFBSTools)
  library(Biostring)
  library(ggplot2)
  
  for(i in 1:length(data)) {
    
    y = c("up", "down")
    
    datalist = list()
    datalist2 = list()
    
    for (j in 1:length(y)) {
      
      seq = readDNAStringSet(paste0(dir, data[i],"_", y[j],"_", "SEQ.fasta"))
      siteset = searchSeq(pwm, seq, min.score = score, strand = "*")
      df = as.data.frame(writeGFF3(siteset))
      c = as.character(df$seqname)
      c = strsplit(c, ":")
      names = lapply(c, '[[', 1)
      df$Wormbase.ID = names
      length(unique(df$Wormbase.ID))

      rna = read.table(paste0(dir, data[i], ".txt"), sep = '\t', header = T)
      n.df = merge(rna, df, by = "Wormbase.ID")
      
      n.coord = data.frame(Wormbase.ID = n.df$Wormbase.ID,
                           gene_name = n.df$gene_name,
                           gene_strand = n.df$strand.x,
                           TFBs_strand = n.df$strand.y,
                           start = ifelse(n.df$strand.x %in% "+",
                                          n.df$start - 2500, 1000 - n.df$start),
                           end = ifelse(n.df$strand.x %in% "+",
                                        n.df$end - 2500, 1000 - n.df$end),
                           width = n.df$end - n.df$start,
                           motif = n.df$attributes,
                           DE = rep(y[j], length(n.df$Wormbase.ID)),
                           log2.Ratio = n.df$log2.Ratio)
      
      datalist2[[j]] = n.coord
      
      rna$labels = ifelse(rna$Wormbase.ID %in% n.df$Wormbase.ID, "bound", "")
      datalist[[j]] = rna
    }
    final.df = do.call(rbind, datalist);
    
    
    t = textGrob(paste0("pwm = grh-1","\n",
                        "score = ", score,"\n",
                        "sample = ", data[i]))
    
    p1 = ggplot(data = final.df, aes(final.df$log2.Ratio, -log10(final.df$fdr.RNAseq)))+
      geom_point(pch=21, fill="grey", alpha = 0.5, pch=21)+
      geom_point(data = final.df[which(final.df$labels %in% "bound"),], 
                 aes(log2.Ratio, -log10(fdr.RNAseq)), fill="steelblue", pch=21)+
      labs(x = expression(paste("log"[2],"RNA fold change")), 
           y = expression(paste("-log"[10]," FDR")))+
      annotate("text", x = 0, y = max(-log10(final.df$fdr.RNAseq)-1),
               label = paste0("Down, n = ", length(final.df$labels[which(final.df$log2.Ratio < 0
                                                                   & final.df$labels %in% "bound")]),
                              "\n", "Up, n = ", length(final.df$labels[which(final.df$log2.Ratio > 0
                                                                             & final.df$labels %in% "bound")])),
               col = "steelblue")+
      theme_classic(12)
    
    final.df2 = do.call(rbind, datalist2);
    
    a = as.data.frame(table(final.df2$gene_name));
    colnames(a) = c("gene_name", "freq");
    a.d = merge(a, final.df2, by = "gene_name");
    
    
    write.table(final.df2, paste0(dir, data[i], "TFB_analysis_", score, ".txt"),
                sep = "\t", quote = F)
    
    p2 = ggplot(final.df2, aes(start))+
      geom_histogram(binwidth = 200, col = "white", fill = "grey")+
      labs(x = "distance from the TSS [bp]")+
      facet_grid(. ~ DE)+
      geom_vline(xintercept = 0, col = "firebrick3")+
      theme_classic(12)
    
    p3 = ggplot(count(final.df2, 'gene_name'), aes(log(freq)))+
      geom_histogram(col = "white", fill = "grey", stat = "count")+
      #facet_grid(. ~ DE)+
      labs(x = "number of motifs per gene")+
      theme_classic(12)
    
    g = ggarrange(t, p3, p1, ggarrange(p2), ncol = 2, nrow = 2)
    
    ggsave(paste0(dir, data[i], "_TFB_analysis.pdf"), plot = g,
          device = "pdf");
    
  dev.off()
  }
  rm(j);
  rm(i);
}


TFBs.analysis(dir, data =name, pwm, score = "95%")
